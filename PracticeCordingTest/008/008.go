// 問題 8: 整数のスライスと、1つの整数 n を引数に取り、スライス内の要素を n 回ローテーションさせた新しいスライスを返す関数をGoで実装してください。ローテーションとは、スライスの要素を左に回転させる操作を意味します。

// 例:

// 入力: []int{1, 2, 3, 4, 5} と 2 の場合、出力は []int{3, 4, 5, 1, 2}
// 入力: []int{10, 20, 30, 40, 50} と 3 の場合、出力は []int{40, 50, 10, 20, 30}

package main

import "fmt"

func rotate(num_slice []int, n int) []int {
	return append(num_slice[n:], num_slice[:n]...)
}

// 2. スライスの切り分け
// go
// コードをコピーする
// return append(num_slice[n:], num_slice[:n]...)
// ここがこの関数の核心部分です。このコードは、スライスを2つに分割して、後半部分と前半部分をつなげています。具体的には以下のような動作をしています。
// num_slice[n:]
// スライスのインデックス n から最後までの部分を取り出します。
// 例えば、rotate([]int{1, 2, 3, 4, 5}, 2) の場合、num_slice[2:] は []int{3, 4, 5} になります。つまり、3番目の要素以降の部分が新しいスライスの最初に来ます。
// num_slice[:n]
// スライスのインデックス 0 から n までの部分を取り出します。
// 同じ例で言うと、num_slice[:2] は []int{1, 2} です。これはスライスの前半部分です。
// append
// append 関数は、2つのスライスを連結します。
// つまり、append(num_slice[n:], num_slice[:n]...) は、num_slice[2:] と num_slice[:2] をつなげて、[]int{3, 4, 5, 1, 2} を作ります。

func main() {
	fmt.Println(rotate([]int{1, 2, 3, 4, 5}, 2))
	fmt.Println(rotate([]int{10, 20, 30, 40, 50}, 3))
}
